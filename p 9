import numpy as np
from sklearn.metrics import mean_squared_error
from math import sqrt

ratings_matrix = np.array([
    [5, 3, 0, 1, 4],
    [4, 0, 0, 1, 4],
    [1, 0, 0, 5, 0],
    [1, 3, 0, 0, 4],
    [0, 3, 0, 4, 0]
])

test_set = np.array([
    [0, 0, 0, 1, 0],
    [0, 0, 2, 0, 5],
    [3, 0, 0, 0, 0],
    [0, 0, 4, 0, 0],
    [0, 0, 0, 3, 4]
])

def user_based_collaborative_filtering(train_data, test_data):
    num_users, num_items = train_data.shape
    predictions = np.zeros_like(test_data, dtype=float)

    for i in range(num_users):
        similarities = []
        for j in range(num_users):
            if j != i:
                sim = np.dot(train_data[i], train_data[j]) / (np.linalg.norm(train_data[i]) * np.linalg.norm(train_data[j]))
                similarities.append((j, sim))

        similarities.sort(key=lambda x: x[1], reverse=True)

        for j in range(num_items):
            if test_data[i][j] != 0:
                numerator = 0
                denominator = 0
                for k in range(len(similarities)):
                    sim_user_id, similarity = similarities[k]
                    if train_data[sim_user_id][j] != 0:
                        numerator += similarity * train_data[sim_user_id][j]
                        denominator += abs(similarity)
                if denominator != 0:
                    predictions[i][j] = numerator / denominator

    return predictions

predictions = user_based_collaborative_filtering(ratings_matrix, test_set)

test_flattened = test_set[test_set != 0]
predictions_flattened = predictions[test_set != 0]

rmse = sqrt(mean_squared_error(test_flattened, predictions_flattened))
print("Root Mean Squared Error (RMSE):", rmse)
